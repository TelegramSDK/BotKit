<?php

declare(strict_types=1);

namespace TelegramSDK\BotKit\Tools;

use TelegramSDK\BotKit\Helpers;
use PHPHtmlParser\Dom;

class Generator
{
    private Dom $dom;

    public function __construct()
    {
        $this->dom = new Dom();
        $this->load();
    }

    private function load()
    {
        Logger::info("Loading https://core.telegram.org/bots/api");
        $this->dom->loadFromUrl('https://core.telegram.org/bots/api');
        Logger::success("HTML Loaded");
    }

    private function getParams($table)
    {
        $params = [];

        // Select all rows in the tbody
        $rows = $table->find('tbody tr');

        foreach ($rows as $row) {
            // Get the cells in the current row
            $cells = $row->find('td');

            // Add each row's data to the params array
            if (count($cells) === 4) {
                $params[] = [
                    'parameter' => Helpers::html_to_text($cells[0]->innerHtml),
                    'type' => Helpers::html_to_text($cells[1]->innerHtml),
                    'required' => $cells[2]->innerHtml === "Yes",
                    'description' => Helpers::html_to_text($cells[3]->innerHtml),
                ];
            }
        }
        return $params;
    }

    public function getAllMethods()
    {
        $element = $this->dom->find('h3 > a[name="available-methods"]')->parent;
        $methods = [];

        Logger::info("Getting all the methods");

        while (1) {
            if ($element->tag->name() == "h4") {

                if (ctype_lower($element->text[0])) { // Methods use camel case syntax, so they must start with a lowercase character
                    $table = $element->nextSibling()->nextSibling()->nextSibling()->nextSibling();
                    $methods[] = [
                        "name" => $element->text,
                        "description" => Helpers::html_to_text($element->nextSibling()->nextSibling()->innerHtml),
                        "params" => $table->tag->name() == 'table' ? $this->getParams($table) : null,
                    ];

                    Logger::info("Found " . $element->text);
                }
            }

            try {
                $element = $element->nextSibling();
            } catch (\Exception $e) {
                break;
            }
        }

        Logger::success("Found " . count($methods) . " methods");
        return $methods;
    }

    private function getSOF()
    {
        return <<<EOD
        <?php
        /**
         * Autogenerated file.
         */

        declare(strict_types=1);

        namespace TelegramSDK\BotKit;

        use \TelegramSDK\BotAPI\Telegram\TelegramResponse;

        trait MethodsTrait {
        EOD;
    }

    private function getRequestParam(array $params)
    {
        $reqParams = [];

        foreach ($params as $param) {
            // Construct the key-value pair
            $key = "'" . $param['parameter'] . "'";
            $value = "\$" . $param['parameter'];
            $reqParams[] = "$key => $value";
        }

        // Join all pairs into a single string
        return "[" . implode(", ", $reqParams) . "]";
    }

    private function getMethodParamsString(array $params)
    {
        $variables = [];

        foreach ($params as $param) {
            $variables[] = "\$" . $param['parameter'] . ($param['required'] ? "" : " = null");
        }

        // Join all variables into a single string
        return implode(", ", $variables);
    }

    private function getWritableMethod(array $method)
    {
        extract($method);
        if (isset($params)) {
            usort($params, function ($a, $b) {
                if ($a['required'] === $b['required']) {
                    return 0;
                }
                return $a['required'] ? -1 : 1;
            });
        }
        $description = implode(".\n * ", explode('. ', $description));
        $methodParams = $this->getMethodParamsString($params ?? []);
        $requestParams = $this->getRequestParam($params ?? []);
        return <<<EOD
        /**
         * $description
         */
        public function $name($methodParams): TelegramResponse
        {
            return parent::$name(Helpers::array_filter($requestParams));
        }
        EOD;
    }

    private function getEOF()
    {
        return <<<EOD
        }
        EOD;
    }

    public function writeMethodsToFile(array $methods, string $output)
    {
        $res = $this->getSOF();
        foreach ($methods as $method) {
            $res .= "\n" . $this->getWritableMethod($method) . "\n";
        }
        $res .= $this->getEOF();

        file_put_contents($output, $res);

        Logger::success("Methods wrote to $output");
    }

    public function lint()
    {
        Logger::info("Formatting files");
        exec("composer lint");
        Logger::success("Files formatted");
    }

    public function __destruct()
    {
        Logger::success("Done!");
    }
}
